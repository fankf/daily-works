package com.dxhy.ofdfile;

import lombok.extern.slf4j.Slf4j;
import org.springframework.util.Base64Utils;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

@Slf4j
public class FileUtils {
    public static final String windowsPath = "D:/ofd/";
    public static final String linuxPath = "/home/qspace/ofd/";

    public static void main(String[] args) throws IOException {

       String str = "";
        write("1123", str);
    }

    private static String path() {
        String path = "";
        String osname = System.getProperty("os.name").toLowerCase();
        if (osname.contains("windows")) {
            path = windowsPath;
        } else {
            path = linuxPath;
        }
        return path;
    }

    public static String read(String fileName) throws IOException {
        String readPath = path();
        File file0 = new File(readPath + fileName + ".ofd");
        FileReader reader = new FileReader(file0);
        char[] buf = new char[128];
        int len;
        StringBuffer sb = new StringBuffer();
        while ((len = reader.read(buf)) != -1) {
            sb.append(new String(buf, 0, len));

        }
        return sb.toString();
    }

    public static void write(String fileName, String data) throws IOException {
        String writePath = path();
        log.info("写入ofd数据 path ：{} fileName :{} data:{}", writePath, fileName, data);

        File file = new File(writePath);
        if (!file.exists()) {
            file.mkdirs();
        }
        FileWriter writer = null;
        try {
            File file0 = new File(writePath + fileName + ".ofd");
            if (!file0.exists()) {
                file0.createNewFile();
            }
            writer = new FileWriter(file0, false);
            byte[] decode = Base64Utils.decode(data.getBytes());
            writer.append(new String(decode, "UTF-8"));
            writer.flush();
        } catch (
                IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null)
                writer.close();
        }
    }
}
